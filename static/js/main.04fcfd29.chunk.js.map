{"version":3,"sources":["store/actions.ts","store/index.ts","store/selectors.ts","components/CurrentUser/CurrentUser.tsx","api/api.ts","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["SET_TODOS","ADD_TODO","SET_USER","DELETE_TODO","setUserAction","payLoad","type","initialState","todos","user","store","createStore","state","action","filter","person","id","getUserSelector","CurrentUser","useSelector","dispatch","useDispatch","className","onClick","name","email","phone","API_URL","getTodos","a","fetch","response","json","getUserById","userId","TodoList","useState","query","setQuery","filterType","setFilterType","filteredTodos","item","title","includes","completed","getFilterTodos","useEffect","loadTodosFromServer","todosFromServer","console","log","getUser","userFromServer","deleteTodo","onChange","e","target","value","map","todo","checked","readOnly","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.04fcfd29.chunk.js","sourcesContent":["import { Action, Todo, User } from '../react-app-env';\n\nexport const SET_TODOS = 'SET_TODOS';\nexport const ADD_TODO = 'ADD_TODO';\nexport const SET_USER = 'SET_USER';\nexport const DELETE_TODO = 'DELETE_TODO';\n\nexport const setTodosAction = (payLoad: Todo[]): Action => ({\n  type: SET_TODOS,\n  payLoad,\n});\n\nexport const addTodosAction = (payLoad: Todo): Action => ({\n  type: ADD_TODO,\n  payLoad,\n});\n\nexport const setUserAction = (payLoad: User | null): Action => ({\n  type: SET_USER,\n  payLoad,\n});\n\nexport const deleteTodoAction = (payLoad: number): Action => ({\n  type: DELETE_TODO,\n  payLoad,\n});\n","import { createStore } from 'redux';\nimport { Action, State } from '../react-app-env';\nimport {\n  SET_TODOS,\n  ADD_TODO,\n  SET_USER,\n  DELETE_TODO,\n} from './actions';\n\nconst initialState: State = {\n  todos: [],\n  user: null,\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payLoad],\n      };\n\n    case ADD_TODO:\n      return {\n        ...state,\n        todos: [...state.todos, action.payLoad],\n      };\n\n    case SET_USER:\n      return {\n        ...state,\n        user: action.payLoad,\n      };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(person => person.id !== action.payLoad),\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import { State } from '../react-app-env';\n\nexport const getTodosSelector = (state: State) => state.todos;\n\nexport const getUserSelector = (state: State) => state.user;\n\nexport const getFilterTodos = (query: string, type: string) => {\n  if (type === 'title') {\n    return (state: State) => (\n      state.todos.filter(item => item.title.includes(query))\n    );\n  }\n\n  return (state: State) => (\n    state.todos.filter(item => {\n      switch (query) {\n        case 'all':\n          return true;\n          break;\n        case 'completed':\n          return item.completed;\n          break;\n        case 'active':\n          return !item.completed;\n          break;\n        default:\n          return false;\n      }\n    })\n  );\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserSelector } from '../../store/selectors';\nimport { setUserAction } from '../../store/actions';\n\nexport const CurrentUser: React.FC = () => {\n  const user = useSelector(getUserSelector);\n  const dispatch = useDispatch();\n\n  if (!user) {\n    return <p>No seelected user</p>;\n  }\n\n  return (\n    <div className=\"CurrentUser\">\n      <button\n        type=\"button\"\n        data-cy=\"userButton\"\n        onClick={() => dispatch(setUserAction(null))}\n      >\n        Clear\n      </button>\n      <h2 className=\"CurrentUser__title\">\n        <span>{`Selected user: ${user.id}`}</span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n    </div>\n  );\n};\n","import { Todo, User } from '../react-app-env';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUserById = async (userId: number): Promise<User> => {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodos, getUserById } from '../../api/api';\nimport {\n  deleteTodoAction,\n  setTodosAction,\n  setUserAction,\n} from '../../store/actions';\nimport { getFilterTodos } from '../../store/selectors';\nimport './TodoList.scss';\n\nexport const TodoList: React.FC = () => {\n  const [query, setQuery] = useState('all');\n  const [filterType, setFilterType] = useState('');\n  const dispatch = useDispatch();\n\n  const filteredTodos = useSelector(getFilterTodos(query, filterType));\n\n  useEffect(() => {\n    const loadTodosFromServer = async () => {\n      try {\n        const todosFromServer = await getTodos();\n\n        dispatch(setTodosAction(todosFromServer));\n      } catch {\n        // eslint-disable-next-line no-console\n        console.log('Todos not found');\n      }\n    };\n\n    loadTodosFromServer();\n  }, []);\n\n  const getUser = async (id: number) => {\n    try {\n      const userFromServer = await getUserById(id);\n\n      dispatch(setUserAction(userFromServer));\n    } catch {\n      // eslint-disable-next-line no-console\n      console.log('User not found');\n    }\n  };\n\n  const deleteTodo = async (id: number) => {\n    dispatch(deleteTodoAction(id));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <div className=\"TodoList__search\">\n        <h4>Search:</h4>\n        <div className=\"TodoList__search-fields\">\n          <label className=\"TodoList__search-label\">\n            by Title\n            <input\n              className=\"TodoList__search-input\"\n              data-cy=\"filterByTitle\"\n              onChange={(e) => {\n                setQuery(e.target.value);\n                setFilterType('title');\n              }}\n            />\n          </label>\n          <label className=\"TodoList__search-label\">\n            by Status\n            <select\n              onChange={(e) => {\n                setQuery(e.target.value);\n                setFilterType('status');\n              }}\n              className=\"TodoList__search-input\"\n            >\n              <option>all</option>\n              <option>active</option>\n              <option>completed</option>\n            </select>\n          </label>\n        </div>\n      </div>\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map((todo) => (\n            <li\n              key={todo.id}\n              className=\"TodoList__item TodoList__item--unchecked\"\n            >\n              <label>\n                <input type=\"checkbox\" checked={todo.completed} readOnly />\n                <p>{todo.title}</p>\n              </label>\n              <div>\n                <button\n                  className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                  type=\"button\"\n                  onClick={() => {\n                    getUser(todo.userId);\n                  }}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n\n                <button\n                  className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                  type=\"button\"\n                  onClick={() => {\n                    deleteTodo(todo.id);\n                  }}\n                >\n                  Delete\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { CurrentUser } from './components/CurrentUser';\nimport { TodoList } from './components/TodoList';\nimport './components/styles/general.scss';\n\nconst App: React.FC = () => (\n  <div className=\"App\">\n    <div className=\"App__sidebar\">\n      <TodoList />\n    </div>\n\n    <div className=\"App__content\">\n      <div className=\"App__content-container\" />\n      <CurrentUser />\n    </div>\n  </div>\n);\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { store } from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}